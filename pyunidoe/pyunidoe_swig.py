# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
import _pyunidoe_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyunidoe_swig.delete_SwigPyIterator

    def value(self):
        return _pyunidoe_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyunidoe_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyunidoe_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyunidoe_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyunidoe_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyunidoe_swig.SwigPyIterator_copy(self)

    def next(self):
        return _pyunidoe_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _pyunidoe_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _pyunidoe_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyunidoe_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyunidoe_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyunidoe_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyunidoe_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyunidoe_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyunidoe_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyunidoe_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyunidoe_swig:
_pyunidoe_swig.SwigPyIterator_swigregister(SwigPyIterator)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.DoubleVector___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.DoubleVector_pop(self)

    def append(self, x):
        return _pyunidoe_swig.DoubleVector_append(self, x)

    def empty(self):
        return _pyunidoe_swig.DoubleVector_empty(self)

    def size(self):
        return _pyunidoe_swig.DoubleVector_size(self)

    def swap(self, v):
        return _pyunidoe_swig.DoubleVector_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.DoubleVector_begin(self)

    def end(self):
        return _pyunidoe_swig.DoubleVector_end(self)

    def rbegin(self):
        return _pyunidoe_swig.DoubleVector_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.DoubleVector_rend(self)

    def clear(self):
        return _pyunidoe_swig.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _pyunidoe_swig.DoubleVector_swiginit(self, _pyunidoe_swig.new_DoubleVector(*args))

    def push_back(self, x):
        return _pyunidoe_swig.DoubleVector_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.DoubleVector_front(self)

    def back(self):
        return _pyunidoe_swig.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_DoubleVector

# Register DoubleVector in _pyunidoe_swig:
_pyunidoe_swig.DoubleVector_swigregister(DoubleVector)
class DoubleVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.DoubleVecVec___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.DoubleVecVec_pop(self)

    def append(self, x):
        return _pyunidoe_swig.DoubleVecVec_append(self, x)

    def empty(self):
        return _pyunidoe_swig.DoubleVecVec_empty(self)

    def size(self):
        return _pyunidoe_swig.DoubleVecVec_size(self)

    def swap(self, v):
        return _pyunidoe_swig.DoubleVecVec_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.DoubleVecVec_begin(self)

    def end(self):
        return _pyunidoe_swig.DoubleVecVec_end(self)

    def rbegin(self):
        return _pyunidoe_swig.DoubleVecVec_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.DoubleVecVec_rend(self)

    def clear(self):
        return _pyunidoe_swig.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyunidoe_swig.DoubleVecVec_swiginit(self, _pyunidoe_swig.new_DoubleVecVec(*args))

    def push_back(self, x):
        return _pyunidoe_swig.DoubleVecVec_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.DoubleVecVec_front(self)

    def back(self):
        return _pyunidoe_swig.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.DoubleVecVec_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_DoubleVecVec

# Register DoubleVecVec in _pyunidoe_swig:
_pyunidoe_swig.DoubleVecVec_swigregister(DoubleVecVec)
class IntegerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.IntegerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.IntegerVector___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.IntegerVector___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.IntegerVector___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.IntegerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.IntegerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.IntegerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.IntegerVector_pop(self)

    def append(self, x):
        return _pyunidoe_swig.IntegerVector_append(self, x)

    def empty(self):
        return _pyunidoe_swig.IntegerVector_empty(self)

    def size(self):
        return _pyunidoe_swig.IntegerVector_size(self)

    def swap(self, v):
        return _pyunidoe_swig.IntegerVector_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.IntegerVector_begin(self)

    def end(self):
        return _pyunidoe_swig.IntegerVector_end(self)

    def rbegin(self):
        return _pyunidoe_swig.IntegerVector_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.IntegerVector_rend(self)

    def clear(self):
        return _pyunidoe_swig.IntegerVector_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.IntegerVector_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.IntegerVector_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.IntegerVector_erase(self, *args)

    def __init__(self, *args):
        _pyunidoe_swig.IntegerVector_swiginit(self, _pyunidoe_swig.new_IntegerVector(*args))

    def push_back(self, x):
        return _pyunidoe_swig.IntegerVector_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.IntegerVector_front(self)

    def back(self):
        return _pyunidoe_swig.IntegerVector_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.IntegerVector_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.IntegerVector_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.IntegerVector_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.IntegerVector_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.IntegerVector_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_IntegerVector

# Register IntegerVector in _pyunidoe_swig:
_pyunidoe_swig.IntegerVector_swigregister(IntegerVector)
class IntegerVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.IntegerVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.IntegerVecVec___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.IntegerVecVec___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.IntegerVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.IntegerVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.IntegerVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.IntegerVecVec_pop(self)

    def append(self, x):
        return _pyunidoe_swig.IntegerVecVec_append(self, x)

    def empty(self):
        return _pyunidoe_swig.IntegerVecVec_empty(self)

    def size(self):
        return _pyunidoe_swig.IntegerVecVec_size(self)

    def swap(self, v):
        return _pyunidoe_swig.IntegerVecVec_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.IntegerVecVec_begin(self)

    def end(self):
        return _pyunidoe_swig.IntegerVecVec_end(self)

    def rbegin(self):
        return _pyunidoe_swig.IntegerVecVec_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.IntegerVecVec_rend(self)

    def clear(self):
        return _pyunidoe_swig.IntegerVecVec_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.IntegerVecVec_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.IntegerVecVec_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.IntegerVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyunidoe_swig.IntegerVecVec_swiginit(self, _pyunidoe_swig.new_IntegerVecVec(*args))

    def push_back(self, x):
        return _pyunidoe_swig.IntegerVecVec_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.IntegerVecVec_front(self)

    def back(self):
        return _pyunidoe_swig.IntegerVecVec_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.IntegerVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.IntegerVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.IntegerVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.IntegerVecVec_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.IntegerVecVec_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_IntegerVecVec

# Register IntegerVecVec in _pyunidoe_swig:
_pyunidoe_swig.IntegerVecVec_swigregister(IntegerVecVec)
class List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init_Design = property(_pyunidoe_swig.List_Init_Design_get, _pyunidoe_swig.List_Init_Design_set)
    Final_Design = property(_pyunidoe_swig.List_Final_Design_get, _pyunidoe_swig.List_Final_Design_set)
    Init_Obj = property(_pyunidoe_swig.List_Init_Obj_get, _pyunidoe_swig.List_Init_Obj_set)
    Final_Obj = property(_pyunidoe_swig.List_Final_Obj_get, _pyunidoe_swig.List_Final_Obj_set)
    Time_Second = property(_pyunidoe_swig.List_Time_Second_get, _pyunidoe_swig.List_Time_Second_set)
    Criterion_history = property(_pyunidoe_swig.List_Criterion_history_get, _pyunidoe_swig.List_Criterion_history_set)

    def __init__(self):
        _pyunidoe_swig.List_swiginit(self, _pyunidoe_swig.new_List())
    __swig_destroy__ = _pyunidoe_swig.delete_List

# Register List in _pyunidoe_swig:
_pyunidoe_swig.List_swigregister(List)

def criteria_selector(crit):
    return _pyunidoe_swig.criteria_selector(crit)

def Generate_init_matrix(init_method, nsamp, nv, nlevel, initX, rand_seed):
    return _pyunidoe_swig.Generate_init_matrix(init_method, nsamp, nv, nlevel, initX, rand_seed)

def Generate_Aug_matrix(init_method, xp, nnew, nv, nlevel, initX):
    return _pyunidoe_swig.Generate_Aug_matrix(init_method, xp, nnew, nv, nlevel, initX)

def CritEval(x0, nlevel, crit):
    return _pyunidoe_swig.CritEval(x0, nlevel, crit)

def SATA_UD(nsamp, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_UD(nsamp, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)

def SATA_AUD(xp, nnew, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_AUD(xp, nnew, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)

def SATA_AUD_COL(xp, nvnew, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_AUD_COL(xp, nvnew, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)

